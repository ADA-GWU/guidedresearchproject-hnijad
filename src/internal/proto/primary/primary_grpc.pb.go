// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.7
// source: primary.proto

package primary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PrimaryNode_HeartBeat_FullMethodName = "/primary.PrimaryNode/HeartBeat"
)

// PrimaryNodeClient is the client API for PrimaryNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrimaryNodeClient interface {
	HeartBeat(ctx context.Context, in *DataNodeInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type primaryNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewPrimaryNodeClient(cc grpc.ClientConnInterface) PrimaryNodeClient {
	return &primaryNodeClient{cc}
}

func (c *primaryNodeClient) HeartBeat(ctx context.Context, in *DataNodeInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PrimaryNode_HeartBeat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrimaryNodeServer is the server API for PrimaryNode service.
// All implementations must embed UnimplementedPrimaryNodeServer
// for forward compatibility
type PrimaryNodeServer interface {
	HeartBeat(context.Context, *DataNodeInfo) (*emptypb.Empty, error)
	mustEmbedUnimplementedPrimaryNodeServer()
}

// UnimplementedPrimaryNodeServer must be embedded to have forward compatible implementations.
type UnimplementedPrimaryNodeServer struct {
}

func (UnimplementedPrimaryNodeServer) HeartBeat(context.Context, *DataNodeInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedPrimaryNodeServer) mustEmbedUnimplementedPrimaryNodeServer() {}

// UnsafePrimaryNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrimaryNodeServer will
// result in compilation errors.
type UnsafePrimaryNodeServer interface {
	mustEmbedUnimplementedPrimaryNodeServer()
}

func RegisterPrimaryNodeServer(s grpc.ServiceRegistrar, srv PrimaryNodeServer) {
	s.RegisterService(&PrimaryNode_ServiceDesc, srv)
}

func _PrimaryNode_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataNodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrimaryNodeServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PrimaryNode_HeartBeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrimaryNodeServer).HeartBeat(ctx, req.(*DataNodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// PrimaryNode_ServiceDesc is the grpc.ServiceDesc for PrimaryNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrimaryNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "primary.PrimaryNode",
	HandlerType: (*PrimaryNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartBeat",
			Handler:    _PrimaryNode_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "primary.proto",
}
